<?php


namespace app\admin\controller;

use app\model\Chapter;
use app\model\Book;
use app\model\Photo;
use think\db\exception\DataNotFoundException;
use think\db\exception\ModelNotFoundException;
use think\exception\ValidateException;
use think\facade\Db;
use think\facade\View;

class Photos extends BaseAdmin
{
    protected $photoModel;

    protected function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->photoModel = app('photoModel');
    }

    public function index()
    {
        $chapter_id = input('chapter_id');
        View::assign([
            'chapter_id' => $chapter_id,
        ]);
        return view();
    }

    public function list()
    {
        $chapter_id = input('chapter_id');
        $page = intval(input('page'));
        $limit = intval(input('limit'));
        $data =  Db::name('photo')->where('chapter_id', '=', $chapter_id)
            ->partition(['p0','p1','p2','p3','p4','p5','p6','p7','p8','p9','p10']);
        $count = $data->count();
        $pics = $data->limit(($page - 1) * $limit, $limit)
            ->order('pic_order', 'desc')->select();
        $img_domain = config('site.img_domain');
        $arr = array();
        foreach ($pics as $pic) {
            $img = $pic['img_url'];
            if (substr($img, 0, 4) === "http") {

            } else {
                $img = $img_domain . $img;
            }
            array_push($arr, [
                'name' => '图片' . $pic['id'],
                'url' => $img,
                'smUrl' => $img,
                'isDir' => false,
                'id' => $pic['id']
            ]);
        }
        return json([
            'code' => 0,
            'msg' => '',
            'count' => $count,
            'data' => $arr
        ]);
    }

    public function clear()
    {
        $chapter_id = input('chapter_id');
        Photo::destroy(function ($query) use ($chapter_id) {
            $query->where('chapter_id', '=', $chapter_id);
        });
        return json(['err' => 0, 'msg' => '清空成功']);
    }

    public function delete()
    {
        $id = input('id');
        Photo::destroy($id);
        return json(['err' => 0, 'msg' => '删除成功']);
    }

    public function upload()
    {
        if (is_null(request()->file())) {
            return json([
                'code' => 1
            ]);
        } else {
            $data = request()->param();
            $chapter_id = $data['chapter_id'];
            $lastPhoto = $this->photoModel->getLastPhoto($chapter_id);
            $order = 1;
            if ($lastPhoto != null) {
                $order = $lastPhoto->pic_order + 1; //拿到最新图片的order，加1
            }
            $file = request()->file('file');
            $dir = 'book/content';
            $photo = new Photo();
            $photo->chapter_id = $chapter_id;
            $photo->pic_order = $order;
            $savename = str_replace('\\', '/',
                \think\facade\Filesystem::disk('public')->putFile($dir, $file));
            $photo->img_url = '/static/upload/' . $savename;
            $photo->save();
            return json([
                'code' => 0,
                'msg' => '上传成功'
            ]);
        }

    }

    public function edit()
    {

        $id = input('id');
        try {
            $photo = Db::name('photo')->partition(['p0','p1','p2','p3','p4','p5','p6','p7','p8','p9','p10'])->findOrFail($id);
            if (request()->isPost()) {
                $id = input('id');
                $order = input('pic_order');
                $photo->pic_order = $order;
                $result = $photo->save();
                if ($result) {
                    return json(['err' => 0, 'msg' => '修改成功']);
                } else {
                    return json(['err' => 1, 'msg' => '修改失败']);
                }
            }
            View::assign([
                'id' => $id,
                'order' => $photo->pic_order,
            ]);
            return view();
        } catch (DataNotFoundException $e) {
            abort(404, $e->getMessage());
        } catch (ModelNotFoundException $e) {
            abort(404, $e->getMessage());
        }
    }
}